istio-cni:
  cni:
    cniBinDir: /var/snap/microk8s/current/opt/cni/bin/
    cniConfDir: /var/snap/microk8s/current/args/cni-network/
    excludeNamespaces:
     - istio-system
     - kube-system
istio-discovery:
  sidecarInjectorWebhook:
    useLegacySelectors: false
    enableNamespacesByDefault: true
  meshConfig:
    extensionProviders:
      # the unique name for the authorizer, referred to by AuthorizationPolicy.
    - name: "oauth-ext-authz"
      # Specifies the concrete type of the external authorizer as Envoy ext_authz filter using
      # HTTP API. Note the HTTP API means the protocol used to talk to the external server, not
      # the user traffic. The other supported API is gRPC.
      # See Exposed ext_authz API for a detailed list of the ext_authz fields exposed here.
      envoyExtAuthzHttp:
        service: "oauth2-proxy.oauth2-proxy.svc.cluster.local"
        port: "80"
        # Send the check request to ext-authz server at the path /check
        #pathPrefix: "/check"
        # Includes the header "x-foo" in the check request to the external server.
        includHeadersInCheck:
        - "cookie"
        - "x-forwarded-access-token"
        - "x-forwarded-user"
        - "x-forwarded-email"
        - "authorization"
        - "x-forwarded-proto"
        - "proxy-authorization"
        - "user-agent"
        - "x-forwarded-host"
        - "from"
        - "x-forwarded-for"
        - "x-forwarded-uri"
        - "x-auth-request-redirect"
        - "accept"
        # https://discuss.istio.io/t/ext-auth-with-istio-1-9-1-and-oauth-proxy-redirect-issue-once-authenticated/9906/4
        # includeAdditionalHeadersInCheck:
        #   X-Auth-Request-Redirect: 'http://%REQ(Host)%'
        # Forwards the Authorization header from the external server to upstream (backend).
        headersToUpstreamOnAllow: ["authorization", "cookie", "path"]
        # headersToUpstreamOnAllow: ["authorization", "cookie", "path", "x-auth-request-user", "x-auth-request-email", "x-auth-request-access-token", "x-auth-request-user-groups"]
        # Forwards the Set-cookie header from the external server to downstream (user).
        headersToDownstreamOnDeny: ["content-type", "set-cookie"] 
istio-ingress:
  gateways:
    istio-ingressgateway:
      name: istio-ingressgateway
      labels:
        app: istio-ingressgateway
        istio: ingressgateway
      ports:
      ## You can add custom gateway ports in user values overrides, but it must include those ports since helm replaces.
      # Note that AWS ELB will by default perform health checks on the first port
      # on this list. Setting this to the health check port will ensure that health
      # checks always work. https://github.com/istio/istio/issues/12503
      - port: 15021
        targetPort: 15021
        name: status-port
        protocol: TCP
      - port: 80
        targetPort: 8080
        name: http2
        protocol: TCP
      - port: 443
        targetPort: 8443
        name: https
        protocol: TCP
      - port: 5556
        targetPort: 5556
        name: http-5556
        protocol: TCP
