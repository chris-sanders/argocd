
# Only run pipeline when values.yaml files are changed
when:
  event: [pull_request]
  path:
    include: ["*/values.yaml"]

labels:
  backend: local

skip_clone: true

steps:
  detect-changes:
    image: /usr/bin/bash
    commands:
      - |
        echo "Detecting changes in values.yaml files..."
        
        # Debug: Print the CI_PIPELINE_FILES content
        echo "CI_PIPELINE_FILES content:"
        echo "$CI_PIPELINE_FILES"
        
        # Use jq to find */values.yaml files and extract directory names
        if [ -n "$CI_PIPELINE_FILES" ]; then
          echo "$CI_PIPELINE_FILES" | jq -r '.[] | select(test("^[^/]+/values.yaml$")) | split("/")[0]' > /tmp/changed_software.txt
        else
          echo "CI_PIPELINE_FILES is empty or not set"
          touch /tmp/changed_software.txt
        fi

        # TEMPORARY: Remove woodpecker from the list for testing
        grep -v "^woodpecker$" /tmp/changed_software.txt > /tmp/changed_software_filtered.txt
        mv /tmp/changed_software_filtered.txt /tmp/changed_software.txt
        
        if [ ! -s /tmp/changed_software.txt ]; then
          echo "No matching values.yaml files were changed. Skipping tests."
          exit 1
        else
          echo "Software with changed values.yaml files:"
          cat /tmp/changed_software.txt
        fi

  clone-repo:
    image: /usr/bin/bash
    commands:
      - |
        if [ ! -f /tmp/changed_software.txt ] || [ ! -s /tmp/changed_software.txt ]; then
          echo "No changes detected. Skipping clone."
          exit 0
        fi
        
        # Get the first software from the list
        SOFTWARE_NAME=$(head -n 1 /tmp/changed_software.txt)
        echo "Selected software for testing: $SOFTWARE_NAME"
        
        # Save the software name for the next step
        echo "$SOFTWARE_NAME" > "$PWD/selected_software.txt"
        
        # Clone the repository using SSH
        echo "Cloning repository for $SOFTWARE_NAME..."
        git clone "git@gitlab.sangdrax.com:ansible/lab/roles/k8s.$${SOFTWARE_NAME}.git"
        
        echo "Repository cloned successfully"
        echo "$PWD"
        ls -la "k8s.$${SOFTWARE_NAME}"

  run-molecule-tests:
    image: /usr/bin/bash
    commands:
      - |
        # Get the software name from the previous step
        SOFTWARE_NAME=$(cat "$PWD/selected_software.txt")
        echo "Running molecule tests for software: $${SOFTWARE_NAME}"
        
        # Navigate to the repository directory
        cd "$PWD/k8s.$${SOFTWARE_NAME}"
        
        # Run molecule tests and capture output
        echo "Starting molecule tests..."
        
        # Create a log directory and file
        mkdir -p "$PWD/logs"
        LOG_FILE="$PWD/logs/molecule_$${SOFTWARE_NAME}.log"
        
        # Run molecule with output capture
        set +e  # Don't exit on error
        molecule test -s default | tee "$LOG_FILE"
        TEST_RESULT=$?
        set -e  # Return to exit on error
        
        # Log the test result
        echo "Molecule test completed with exit code: $${TEST_RESULT}"
        
        if [ $${TEST_RESULT} -eq 0 ]; then
          echo "✅ Tests PASSED for $${SOFTWARE_NAME}"
        else
          echo "❌ Tests FAILED for $${SOFTWARE_NAME}"
          # Output the last 50 lines of the log to help diagnose failures
          echo "Last 50 lines of the test log:"
          tail -n 50 "$LOG_FILE"
        fi
        
        exit $${TEST_RESULT}
