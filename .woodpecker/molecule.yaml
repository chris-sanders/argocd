labels:
  backend: kubernetes

when:
  - event: 
    - pull_request
    - manual

skip_clone: true

steps:
  - name: setup-and-validate
    image: alpine:latest
    environment:
      SSH_KEY:
        from_secret: ssh_key
    commands:
      - |
        # Install required packages
        apk update
        apk add --no-cache jq grep openssh-client git

        echo "=== User info ==="
        id
        echo "=== All Environment Variables ==="
        env | sort

        echo "=== Detecting changes in chart files ==="
        
        # Debug: Print the CI_PIPELINE_FILES content
        echo "CI_PIPELINE_FILES content:"
        echo "$CI_PIPELINE_FILES"
        
        # Use jq to find any files in chart directories and extract unique directory names
        if [ -n "$CI_PIPELINE_FILES" ]; then
          echo "$CI_PIPELINE_FILES" | jq -r '.[] | select(test("^[^/]+/[^/]+")) | split("/")[0]' | sort -u > changed_software.txt
        else
          echo "CI_PIPELINE_FILES is empty or not set"
          touch changed_software.txt
        fi

        if [ ! -s changed_software.txt ]; then
          echo "No chart files were changed. Skipping tests."
          exit 1
        else
          echo "Charts with modified files:"
          cat changed_software.txt
          
          # Validate only one chart is changed
          CHART_COUNT=$(wc -l < changed_software.txt)
          if [ "$CHART_COUNT" -gt 1 ]; then
            echo "ERROR: Multiple charts detected in this PR:"
            cat changed_software.txt
            echo "Only one chart can be changed per PR."
            exit 1
          fi
          
          echo "Single chart validation passed."
        fi

        echo "=== Cloning role repository ==="
        
        SOFTWARE_NAME=$(head -n 1 "$${CI_WORKSPACE}/changed_software.txt")
        echo "Selected software for testing: $SOFTWARE_NAME"

        if [ -z "$SOFTWARE_NAME" ]; then
          echo "Error: SOFTWARE_NAME is empty from changed_software.txt."
          exit 1
        fi
        
        # Explicitly check if SSH_KEY environment variable is populated
        if [ -z "$${SSH_KEY}" ]; then 
          echo "Error: The SSH_KEY environment variable is empty or not set."
          echo "Please verify the 'ssh_key' secret is correctly configured in Woodpecker CI settings."
          exit 1
        fi
        
        echo "Setting up SSH key..."
        mkdir -p ~/.ssh 
        chmod 700 ~/.ssh 
        echo "$${SSH_KEY}" > ~/.ssh/id_rsa 
        chmod 600 ~/.ssh/id_rsa 
        echo "SSH key file ~/.ssh/id_rsa configured."

        echo "Cloning repository for $SOFTWARE_NAME..." 
        export GIT_SSH_COMMAND="ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no" 
        git clone "git@gitlab.sangdrax.com:ansible/lab/roles/k8s.$${SOFTWARE_NAME}.git" "$${CI_WORKSPACE}/k8s.$${SOFTWARE_NAME}"
        
        echo "Repository cloned successfully into $${CI_WORKSPACE}/k8s.$${SOFTWARE_NAME}"
        echo "Current directory: $PWD"
        echo "Listing cloned directory:"
        ls -la "$${CI_WORKSPACE}/k8s.$${SOFTWARE_NAME}"
        echo "=== CI_WORKSPACE content after clone-role-repo ==="
        ls -la "$${CI_WORKSPACE}"

        echo "=== Validating role branch configuration ==="
        
        CONVERGE_FILE="$${CI_WORKSPACE}/k8s.$${SOFTWARE_NAME}/molecule/proxmox/converge.yml"
        
        if [ ! -f "$CONVERGE_FILE" ]; then
          echo "ERROR: converge.yml not found at $CONVERGE_FILE"
          exit 1
        fi
        
        # Check if role has branch variable configuration
        # Look for the role-specific branch variable pattern
        EXPECTED_VAR="k8s_$(echo $${SOFTWARE_NAME} | tr '-' '_')_branch"
        
        if ! grep -q "$${EXPECTED_VAR}.*CI_COMMIT_SOURCE_BRANCH\|$${EXPECTED_VAR}.*CI_COMMIT_BRANCH" "$CONVERGE_FILE"; then
          echo "ERROR: Role k8s.$${SOFTWARE_NAME} missing branch configuration!"
          echo "converge.yml must include: $${EXPECTED_VAR}: \"{{ lookup('env', 'CI_COMMIT_SOURCE_BRANCH') | default('master', true) }}\""
          echo "Without this, tests run against 'master' instead of PR branch."
          exit 1
        fi
        
        echo "âœ“ Role has proper branch configuration with variable: $${EXPECTED_VAR}"

  - name: molecule-converge
    image: gitea.v2.zarek.cc/twinlabs/ansible-molecule:latest
    environment:
      # Secrets for Proxmox
      PROXMOX_HOST:
        from_secret: proxmox_host
      PROXMOX_USER:
        from_secret: proxmox_user
      PROXMOX_API_TOKEN_ID:
        from_secret: proxmox_api_token_id
      PROXMOX_API_TOKEN_SECRET:
        from_secret: proxmox_api_token_secret
      SSH_KEY:
        from_secret: ssh_key
      K8S_ARGOCD_PRIVATE_REPOS:
        from_secret: k8s_argocd_private_repos
    commands:
      - |
        # Setup SSH
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        echo "$${SSH_KEY}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        export GIT_SSH_COMMAND="ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no"
        echo "SSH configured"

        SOFTWARE_NAME=$(head -n 1 "$${CI_WORKSPACE}/changed_software.txt")
        cd "k8s.$SOFTWARE_NAME" 
        echo "Executing molecule converge in $PWD"
        molecule converge -s proxmox -- \
          -e "site_chart_url=ssh://git@gitea.v2.zarek.cc:8222/twinlabs/argocd.git"
        
        echo "Molecule converge for $SOFTWARE_NAME completed."

  - name: molecule-verify
    image: gitea.v2.zarek.cc/twinlabs/ansible-molecule:latest
    environment:
      # Secrets for Proxmox
      PROXMOX_HOST:
        from_secret: proxmox_host
      PROXMOX_USER:
        from_secret: proxmox_user
      PROXMOX_API_TOKEN_ID:
        from_secret: proxmox_api_token_id
      PROXMOX_API_TOKEN_SECRET:
        from_secret: proxmox_api_token_secret
      SSH_KEY:
        from_secret: ssh_key
      K8S_ARGOCD_PRIVATE_REPOS:
        from_secret: k8s_argocd_private_repos
    commands:
      - |
        # Setup SSH
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        echo "$${SSH_KEY}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        export GIT_SSH_COMMAND="ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no"
        echo "SSH configured"

        SOFTWARE_NAME=$(head -n 1 "$${CI_WORKSPACE}/changed_software.txt")
        cd "k8s.$SOFTWARE_NAME" 
        
        # Check if verify.yml exists in the proxmox scenario
        if [ -f "molecule/proxmox/verify.yml" ]; then
          echo "Executing molecule verify in $PWD"
          molecule verify -s proxmox
          echo "Molecule verify for $SOFTWARE_NAME completed."
        else
          echo "No verify.yml found for $SOFTWARE_NAME - skipping verification step"
        fi

  - name: molecule-destroy
    image: gitea.v2.zarek.cc/twinlabs/ansible-molecule:latest
    environment:
      PROXMOX_HOST:
        from_secret: proxmox_host
      PROXMOX_USER:
        from_secret: proxmox_user
      PROXMOX_API_TOKEN_ID:
        from_secret: proxmox_api_token_id
      PROXMOX_API_TOKEN_SECRET:
        from_secret: proxmox_api_token_secret
      SSH_KEY:
        from_secret: ssh_key
    when:
      status: [ success, failure ]
    commands:
      - |
        # Setup SSH
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        echo "$${SSH_KEY}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        export GIT_SSH_COMMAND="ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no"
        echo "SSH configured"

        echo "--- Attempting Molecule Destroy (Cleanup) ---"
        SOFTWARE_NAME=$(head -n 1 "$${CI_WORKSPACE}/changed_software.txt")

        echo "Cleaning up Molecule environment for: $SOFTWARE_NAME"
        cd "k8s.$${SOFTWARE_NAME}"

        echo "Executing molecule destroy in $PWD"
        molecule destroy -s proxmox
        
        echo "Molecule destroy for $SOFTWARE_NAME completed."
