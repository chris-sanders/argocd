opa:
  image: 
    repository: openpolicyagent/opa
    tag: 1.4.2

  mgmt:
    enabled: false

  authz:
    enabled: false

  useHttps: false

  opa:
    log_level: debug
    decision_logs:
      #console: false
      console: true
      request_context:
        http:
          headers:
          - Authorization 

  bootstrapPolicies:
    keycloak: |
      package keycloak.authz
      
      import rego.v1
      
      default allow        := false
      default log_decision := true
      
      # -- helpers ----------------------------------------------------------
      
      parse_header(str) = items if {
          items := split(str, ",")
      }
      
      required_groups := parse_header(input.headers["X-Required-Groups"][0]) if {
          input.headers["X-Required-Groups"]
      }
      
      required_roles := parse_header(input.headers["X-Required-Roles"][0]) if {
          input.headers["X-Required-Roles"]
      }
      
      token_roles := array.concat(
          [r | input.tokenPayload.realm_access.roles[_] == r],
          [r |
              some svc
              input.tokenPayload.resource_access[svc].roles[_] == r
          ],
      )
      
      matching_groups := {g | required_groups[_] == g; g == input.tokenPayload.groups[_]}
      matching_roles  := {r | required_roles[_] == r; r == token_roles[_]}
      
      allow if count(matching_groups) > 0
      allow if count(matching_roles)  > 0
      
      # -- logging ----------------------------------------------------------
      
      deny_log if not allow {
          print({
              "msg": "Access denied",
              "user": input.tokenPayload.preferred_username,
              "required_groups": required_groups,
              "required_roles": required_roles,
              "token": input.tokenPayload,
          })
      }
      
      log_decision if true {        # always runs
          result := {
              "decision": allow,
              "user": input.tokenPayload.preferred_username,
              "required_groups": required_groups,
              "required_roles": required_roles,
              "user_groups": input.tokenPayload.groups,
              "user_roles": token_roles,
              "matching_groups": matching_groups,
              "matching_roles": matching_roles,
          }
          print({"msg": "Authorization decision", "details": result})
      }
