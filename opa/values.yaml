opa:
  image: 
    repository: openpolicyagent/opa
    tag: 1.4.2

  mgmt:
    enabled: false

  authz:
    enabled: false

  useHttps: false

  opa:
    log_level: debug
    decision_logs:
      #console: false
      console: true
      request_context:
        http:
          headers:
          - Authorization 

  bootstrapPolicies:
    keycloak: |
      package keycloak.authz

      import future.keywords
      
      default allow = false
      default log_decision = true
      
      # Helper ─ split comma‑separated header values
      parse_header(str) = items { items := split(str, ",") }
      
      required_groups := parse_header(input.headers["X-Required-Groups"][0]) {
          input.headers["X-Required-Groups"]
      }
      
      required_roles := parse_header(input.headers["X-Required-Roles"][0]) {
          input.headers["X-Required-Roles"]
      }
      
      # Flatten roles that Keycloak puts under realm_access and resource_access
      token_roles := [r |
          some i
          input.tokenPayload.realm_access.roles[i] == r
      ] ++ [r |
          some svc
          some i
          input.tokenPayload.resource_access[svc].roles[i] == r
      ]
      
      matching_groups := {g | required_groups[_] == g; g == input.tokenPayload.groups[_]}
      matching_roles  := {r | required_roles[_] == r; r == token_roles[_]}
      
      allow { count(matching_groups) > 0 }
      allow { count(matching_roles)  > 0 }
      
      # --- Logging helpers ---------------------------------------------------------
      deny_log {
          not allow
          print({"msg": "Access denied",
                 "user": input.tokenPayload.preferred_username,
                 "required_groups": required_groups,
                 "required_roles": required_roles,
                 "token": input.tokenPayload})
      }
      
      log_decision {
          result := {
              "decision": allow,
              "user": input.tokenPayload.preferred_username,
              "required_groups": required_groups,
              "required_roles": required_roles,
              "user_groups": input.tokenPayload.groups,
              "user_roles": token_roles,
              "matching_groups": matching_groups,
              "matching_roles": matching_roles,
          }
          print({"msg": "Authorization decision", "details": result})
      }
