{{- define "authUrl" -}}
  {{- $auth := .auth | default dict -}}
  {{- $host := default "auth" $auth.host -}}
  {{- printf "http://keycloak-service.keycloak.svc:8080/realms/%s/protocol/openid-connect/certs" $host -}}
{{- end -}}

{{- define "getMiddlewareName" -}}
  {{- $host := .host | splitList "." -}}
  {{- $firstPart := index $host 0 -}}
  {{- $path := .path | default "" | trimPrefix "/" | replace "/" "-" -}}
  {{- if $path -}}
    {{- printf "%s-%s" $firstPart $path -}}
  {{- else -}}
    {{- $firstPart -}}
  {{- end -}}
{{- end -}}

{{- range $host, $routeConfig := .Values.traefikRoutes }}
---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: {{ $host | splitList "." | first }}
spec:
  entryPoints:
    - websecure
  routes:
    {{- range $route := $routeConfig.routes | default (list (dict "path" "")) }}
    - kind: Rule
      match: Host(`{{ $host }}`){{ if .path }} && Path(`{{ .path }}`){{ end }}{{ if .pathPrefix }} && PathPrefix(`{{ .pathPrefix }}`){{ end }}
      {{- if or .redirectPath .auth .authGroups .authRoles .whitelist }}
      middlewares:
        {{- if .whitelist }}
        - name: {{ include "getMiddlewareName" (dict "host" $host "path" (or .path .pathPrefix)) }}-whitelist
        {{- end }}

        {{- if .redirectPath }}
        - name: {{ include "getMiddlewareName" (dict "host" $host "path" (or .path .pathPrefix)) }}-redirect
        {{- end }}

        {{- if or .auth .authGroups .authRoles }}
        - name: {{ include "getMiddlewareName" (dict "host" $host "path" (or .path .pathPrefix)) }}-auth
        {{- end }}

        {{- if .authGroups }}
        - name: {{ include "getMiddlewareName" (dict "host" $host "path" (or .path .pathPrefix)) }}-inject-groups
        {{- end }}

        {{- if .authRoles }}
        - name: {{ include "getMiddlewareName" (dict "host" $host "path" (or .path .pathPrefix)) }}-inject-roles
        {{- end }}

        {{- if or .auth .authGroups .authRoles }}
        - name: {{ include "getMiddlewareName" (dict "host" $host "path" (or .path .pathPrefix)) }}-authz
        {{- end }}
      {{- end }}
      services:
        {{- if .redirectPath }}
        - kind: TraefikService
          name: noop@internal
        {{- else }}
        - kind: {{ $routeConfig.serviceType | default "Service" }}
          name: {{ $routeConfig.serviceName }}
          {{- if not $routeConfig.serviceType }}
          port: {{ $routeConfig.servicePort }}
          {{- end }}
          {{- if $routeConfig.scheme }}
          scheme: {{ $routeConfig.scheme }}
          {{- end }}
        {{- end }}
    {{- end }}
{{- end }}

{{- range $host, $routeConfig := .Values.traefikRoutes }}
  {{- range $route := $routeConfig.routes }}
    {{- $base := dict "host" $host "path" (or $route.path $route.pathPrefix) }}
    {{- if $route.redirectPath }}
---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: {{ include "getMiddlewareName" $base }}-redirect
spec:
  redirectRegex:
    regex: ^https?://{{ $host | replace "." "\\." }}{{ or $route.path $route.pathPrefix | default "/" | replace "/" "\\/" }}/?$
    replacement: https://{{ $host }}{{ $route.redirectPath }}
    permanent: true
    {{- end }}

    {{- if or $route.auth $route.authGroups $route.authRoles }}
---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: {{ include "getMiddlewareName" $base }}-auth
spec:
  forwardAuth:
    address: http://oauth2-proxy.oauth2-proxy.svc.cluster.local:80
    trustForwardHeader: true
    authResponseHeaders:
      - Authorization
---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: {{ include "getMiddlewareName" $base }}-authz
spec:
  plugin:
    jwt:
      OpaUrl: http://opa.opa.svc:8181/v1/data/keycloak/authz
      Required: true
      Keys:
        - {{ include "authUrl" (dict "traefikHost" $host "auth" $routeConfig.auth) }}
    {{- end }}

    {{- if $route.authGroups }}
---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: {{ include "getMiddlewareName" $base }}-inject-groups
spec:
  headers:
    customRequestHeaders:
      X-Required-Groups: {{ join "," $route.authGroups | quote }}
    {{- end }}

    {{- if $route.authRoles }}
---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: {{ include "getMiddlewareName" $base }}-inject-roles
spec:
  headers:
    customRequestHeaders:
      X-Required-Roles: {{ join "," $route.authRoles | quote }}
    {{- end }}

    {{- if $route.whitelist }}
---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: {{ include "getMiddlewareName" $base }}-whitelist
spec:
  ipAllowList:
    sourceRange:
      - 192.168.0.0/23
      - 10.244.0.0/16
    {{- if $route.whitelistDepth }}
    ipStrategy:
      depth: {{ $route.whitelistDepth }}
    {{- end }}
    {{- end }}
  {{- end }}
{{- end }}
